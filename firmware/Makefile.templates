#a Copyright (C) 2015,  Gavin J Stark.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# @file    firmware/Makefile.templates
# @brief   Templates for assembling, compiling, linking firmware
#

#a Microcode templates
#f microcode.assemble
#
# Assembler a microcode file into the firmware build directory
#
# @param $1	object descriptor
# @param $2 source directory
# @param $3 source code
# @param $4 assembly flags
#
define microcode.assemble

$1__INC   += $(NFAS_BASE_INC)
$1__DEFS  += $(NFAS_BASE_DEFS)
$1__FLAGS += $(NFAS_BASE_FLAGS)
$1__FLAGS += $4
$1__LIST  = $(FW_BUILD)/$1.list

$$($1__LIST): $(FIRMWARE_DIR)/$2/$3
	$(NFAS) $$($1__FLAGS) $$($1__DEFS) $$($1__INC) -o $$@ $$<

endef

#f microcode.assemble_init
#
# Assembler a microcode file into the firmware build directory
#
# @param $1	object descriptor
# @param $2 source directory
# @param $3 source code
# @param $4 assembly flags
#
define microcode.assemble_init

$1__INC   += $(NFAS_BASE_INC)
$1__DEFS  += $(NFAS_BASE_DEFS)
$1__FLAGS += $(NFAS_BASE_FLAGS)
$1__FLAGS += $4
$1__FLAGS += --codeless
$1__LIST  = $(FW_BUILD)/$1.list

$$($1__LIST): $(FIRMWARE_DIR)/$2/$3
	$(NFAS) $$($1__FLAGS) $$($1__DEFS) $$($1__INC) -o $$@ $$<
	$(NFAS_CODELESS_FIXUP) $$@

endef

#a Micro-c templates
#f micro_c.compile
#
# Compile a micro-c file into the firmware build directory
#
# @param $1	object descriptor
# @param $2	source directory
# @param $3	source code
#
define micro_c.compile

$1__INC   += $(NFCC_BASE_INC)
$1__DEFS  += $(NFCC_BASE_DEFS)
$1__FLAGS += $(NFCC_BASE_FLAGS)
$1__CLIBS += $(NFCC_BASE_CLIBS)
$1__LIST  += $(FW_BUILD)/$1.list
$1__DEPENDENCIES +=

$$($1__LIST): $(FIRMWARE_DIR)/$2/$3 $$($1__CLIBS) $$($1__DEPENDENCIES)
	$(NFCC) -Fo$(FW_BUILD)/ -Fe$$@ $$($1__FLAGS) $$($1__INC) $$($1__DEFS) $$($1__CLIBS) $$<

endef

#f micro_c.add_src_lib
#
# Add a single source library to a Micro-c compilation
#
# @param $1	object descriptor
# @param $2	source directory
# @param $3	source code
#
define micro_c.add_src_lib

$1__CLIBS += $(FIRMWARE_DIR)/$2/$3.c
$1__DEPENDENCIES += $(FIRMWARE_DIR)/$2/$3.c

endef

#f micro_c.add_fw_lib
#
# Add a single firmware library to a Micro-c compilation
#
# @param $1	object descriptor
# @param $2	library name
#
define micro_c.add_fw_lib

$1__INC   += 
$1__CLIBS += $(FIRMWARE_DIR)/lib/$2/lib$2.c

endef

#f micro_c.add_fw_libs
#
# Add a list of firmware libraries to a Micro-c compilation
#
# @param $1	object descriptor
# @param $2	list of library names
#
define micro_c.add_fw_libs

$(foreach lib,$2,$(eval $(call micro_c.add_fw_lib,$1,$(lib))))

endef

#f micro_c.add_define
#
# Add a single define to a Micro-c compilation
#
# @param $1	object descriptor
# @param $2	define (i.e. the bit after '-D')
#
define micro_c.add_define

$1__DEFS  += -D$2

endef

#f micro_c.add_defines
#
# Add a list of defines to a Micro-c compilation
#
# @param $1	object descriptor
# @param $2	list of defines (i.e. the bit after '-D')
#
define micro_c.add_defines

$(foreach define,$2,$(eval $(call micro_c.add_define,$1,$(define))))

endef

#f micro_c.add_flags
#
# Add a string of flags to a compilation
#
# @param $1	object descriptor
# @param $2	flags
#
define micro_c.add_flags

$1__FLAGS += $2

endef

#f micro_c.force_include
#
# Force inclusion of a header file
#
# @param $1	object descriptor
# @param $2	source directory
# @param $3	source code
#
define micro_c.force_include

$1__DEFS  += -FI$(FIRMWARE_DIR)/$2/$3.h
$1__DEPENDENCIES += $(FIRMWARE_DIR)/$2/$3.h

endef

#a NFFW templates
#f nffw.link
#
# Create link targets to build an nffw
#
# @param $1	firmware name (for .nffw)
#
define nffw.link

$1__NFFW := $(FW_NFFW)/$1.nffw
$1__MAP  := $(FW_BUILD)/$1.map

$$($1__NFFW): $$($1__LINK_DEPENDENCIES)
	$(NFLD) $(NFLD_BASE_FLAGS) $$($1__LINK_FLAGS) -o $$@ -map $$($1__MAP) $$($1__ME_LOADS) $$($1__PPC_LOADS)

$1__NFFW: $$($1__NFFW)

all_nffw: $1__NFFW

load_$1: $$($1__NFFW)
	nfp-nffw $$($1__NFFW) load

endef

#f nffw.add_init_obj
#
# Add an initial CSR object descriptor (list file) to an nffw
#
# @param $1	firmware name
# @param $2 object descriptor
#
define nffw.add_init_obj

$1__LINK_DEPENDENCIES += $$($2__LIST)
$1__ME_LOADS          += -L $$($2__LIST)

endef

#f nffw.add_obj
#
# Add an object descriptor (list file) to an nffw for an ME
#
# @param $1	firmware name
# @param $2 object descriptor
# @param $3 island.me
#
define nffw.add_obj

$1__LINK_DEPENDENCIES += $$($2__LIST)
$1__ME_LOADS          += -u $3 $$($2__LIST)

endef

#f nffw.add_obj_with_mes
#
# Add an object descriptor (list file) to an nffw for a list of MEs
#
# @param $1	firmware name
# @param $2 object descriptor
# @param $3 list of island.me's
#
#
define nffw.add_obj_with_mes

$(foreach me,$3,$(eval $(call nffw.add_obj,$1,$2,$(me))))

endef

#f nffw.add_rtsyms
##
# Template for adding a run-time symbol table
#
# @param $1	firmware name
#
#
define nffw.add_rtsyms

$1__LINK_FLAGS += -mip -rtsyms

endef

#f nffw.add_ppc
#
# Add a PPC firmware object to an nffw
#
# @param $1	firmware name
# @param $2 i8 or i9
# @param $3 picocode firmware filename
#
define nffw.add_ppc

$1__PPC_LOADS += -i $2 -e $3

endef
